import{_ as p,o as u,d as h,b as c,a as f,n as g,g as m}from"./index-d9377e3a.js";class _{constructor(){this.listeners={}}on(e,s){this.listeners[e]=this.listeners[e]||[],this.listeners[e].push(s)}trigger(e,s){(this.listeners[e]||[]).forEach(l=>{l.call(this,s)})}upload(e,s){return new Promise((d,l)=>{let r=new XMLHttpRequest;r.upload.addEventListener("loadstart",()=>{this.trigger("start")}),r.upload.addEventListener("progress",a=>{a.lengthComputable&&this.trigger("progress",{uploaded:a.loaded,total:a.total})}),r.upload.addEventListener("load",()=>{this.trigger("finish")}),r.addEventListener("error",()=>{this.trigger("error"),l()}),r.onreadystatechange=()=>{if(r.readyState==XMLHttpRequest.DONE){let a;if(r.status===200){let o=null;try{o=JSON.parse(r.responseText)}catch{o=r.responseText}let n=o.message||o;d(n)}else if(r.status===403)a=JSON.parse(r.responseText);else{this.failed=!0;try{a=JSON.parse(r.responseText)}catch{}}a&&a.exc&&console.error(JSON.parse(a.exc)[0]),l(a)}},r.open("POST","/api/method/upload_file",!0),r.setRequestHeader("Accept","application/json"),window.csrf_token&&window.csrf_token!=="{{ csrf_token }}"&&r.setRequestHeader("X-Frappe-CSRF-Token",window.csrf_token);let t=new FormData;e&&t.append("file",e,e.name),t.append("is_private",+(s.private||0)),t.append("folder",s.folder||"Home"),s.file_url&&t.append("file_url",s.file_url),s.doctype&&s.docname&&(t.append("doctype",s.doctype),t.append("docname",s.docname),s.fieldname&&t.append("fieldname",s.fieldname)),s.method&&t.append("method",s.method),s.type&&t.append("type",s.type),r.send(t)})}}const F={name:"FileUploader",props:["fileTypes","uploadArgs","validateFile"],data(){return{uploader:null,uploading:!1,uploaded:0,error:null,message:"",total:0,file:null,finishedUploading:!1}},computed:{progress(){let i=Math.floor(this.uploaded/this.total*100);return isNaN(i)?0:i},success(){return this.finishedUploading&&!this.error}},methods:{openFileSelector(){this.$refs.input.click()},async onFileAdd(i){if(this.error=null,this.file=i.target.files[0],this.file&&this.validateFile)try{let e=await this.validateFile(this.file);e&&(this.error=e)}catch(e){this.error=e}this.error||this.uploadFile(this.file)},async uploadFile(i){this.error=null,this.uploaded=0,this.total=0,this.uploader=new _,this.uploader.on("start",()=>{this.uploading=!0}),this.uploader.on("progress",e=>{this.uploaded=e.uploaded,this.total=e.total}),this.uploader.on("error",()=>{this.uploading=!1,this.error="Error Uploading File"}),this.uploader.on("finish",()=>{this.uploading=!1,this.finishedUploading=!0}),this.uploader.upload(i,this.uploadArgs||{}).then(e=>{this.$emit("success",e)}).catch(e=>{this.uploading=!1;let s="Error Uploading File";e?._server_messages?s=JSON.parse(JSON.parse(e._server_messages)[0]).message:e?.exc&&(s=JSON.parse(e.exc)[0].split(`
`).slice(-2,-1)[0]),this.error=s,this.$emit("failure",e)})}}},y=["accept"];function S(i,e,s,d,l,r){return u(),h("div",null,[c("input",{ref:"input",type:"file",accept:s.fileTypes,class:"hidden",onChange:e[0]||(e[0]=(...t)=>r.onFileAdd&&r.onFileAdd(...t))},null,40,y),f(i.$slots,"default",g(m({file:l.file,uploading:l.uploading,progress:r.progress,uploaded:l.uploaded,message:l.message,error:l.error,total:l.total,success:r.success,openFileSelector:r.openFileSelector})))])}const x=p(F,[["render",S]]);export{x as F};
